#!/usr/bin/env python3
"""Move Ingenuity up and down."""

import rclpy  # type: ignore
from rclpy.node import Node  # type: ignore
from builtin_interfaces.msg import Duration  # type: ignore

from std_msgs.msg import Float64  # type: ignore
from std_srvs.srv import Empty  # type: ignore


class MoveUpDown(Node):
    """Move drone up and down."""

    def __init__(self):
        super().__init__("ingenuity_vertical_node")
        self.altitude_publisher_ = self.create_publisher(
            Float64, "/desired_altitude", 10
        )
        self.up_srv = self.create_service(Empty, "helicopter_up", self.helicopter_up_callback)
        self.down_srv = self.create_service(
            Empty, "helicopter_down", self.helicopter_down_callback
        )

    def helicopter_up_callback(self, request, response):  # pylint: disable=unused-argument
        """Send ingenuity up to height of 15 meters."""
        msg = Float64()
        msg.data = 15.0

        self.altitude_publisher_.publish(msg)

        return response

    def helicopter_down_callback(self, request, response):  # pylint: disable=unused-argument
        """Send ingenuity up to height of 7.5 meters."""
        msg = Float64()
        msg.data = 7.5

        self.altitude_publisher_.publish(msg)

        return response


def main(args=None):
    """Main function"""
    rclpy.init(args=args)

    up_down_node = MoveUpDown()

    rclpy.spin(up_down_node)
    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    up_down_node.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()
